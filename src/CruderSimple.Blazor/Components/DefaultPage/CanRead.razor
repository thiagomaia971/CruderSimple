@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase

<AuthorizeView Policy="CanRead" Resource="routeData" Context="context">
    <Authorized>
        <AuthorizeView Policy="CanWrite" Resource="routeData" Context="context2">
            <Authorized>
                <MainPage Routes="@Routes" TopBarStart="@BarStart">
                    @ChildContent
                </MainPage>
            </Authorized>
            <NotAuthorized>
                <MainPage Routes="@Routes" TopBarStart="@BarStart">
                    @ChildContent
                </MainPage>
            </NotAuthorized>
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        @if (context.User.Identity?.IsAuthenticated == true)
        {
            <MainPage Routes="@Routes" TopBarStart="@BarStart">
                @if (AllowAnonymous)
                {
                    <MainPage Routes="@Routes" TopBarStart="@BarStart">
                        @ChildContent
                    </MainPage>
                }else
                {
                    <_401Page />
                }
            </MainPage>
        }

        @if (context.User.Identity?.IsAuthenticated != true)
        {
            @if (AllowAnonymous)
            {
                @ChildContent
            }else
            {
                <RedirectToLogin />
            }

        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public RenderFragment BarStart { get; set; }
    [Parameter]
    public ICollection<SideMenu.PageSide>? Routes { get; set; } = new List<SideMenu.PageSide>();
    [CascadingParameter(Name = "AppRouteData")]
    RouteData? routeData { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public bool AllowAnonymous { get; set; }

    protected override Task OnInitializedAsync()
    {
        AllowAnonymous = routeData.PageType.CustomAttributes.Any(x => x.AttributeType == typeof(AllowAnonymousAttribute));
        return base.OnInitializedAsync();
    }

}
