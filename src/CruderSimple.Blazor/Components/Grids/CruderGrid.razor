@using CruderSimple.Core.Entities
@using CruderSimple.Core.ViewModels
@using Microsoft.AspNetCore.Components.Forms

@typeparam TGridEntity where TGridEntity : IEntity
@typeparam TGridDto where TGridDto : BaseDto
@inherits CruderGridBase<TGridEntity, TGridDto>

<CascadingValue Value="this" IsFixed>
    <Row Padding="@Padding">
        <Column ColumnSize="ColumnSize.Is12">
            <DataGrid @ref="DataGridRef"
                        TItem="TGridDto"
                        Class="cruder-grid-base"
                        Data="@SearchedData"
                        Hoverable
                        ShowPager
                        ShowPageSizes
                        Responsive
                        EditMode="DataGridEditMode.Popup"
                        CommandMode="DataGridCommandMode.Commands"
                        Editable
                        Filterable
                        Groupable
                        Narrow
                        Sortable
                        Navigable
                        FixedHeader
                        Resizable
                        Bordered
                        DetailRowStartsVisible="false"
                        FixedHeaderDataGridHeight="@Height?.FixedSize.Value.ToString()"
                        FixedHeaderDataGridMaxHeight="430px"
                        SortMode="DataGridSortMode.Single"
                        FilterMode="DataGridFilterMode.Menu"
                        ReadData="@GetData"
                      TotalItems="@TotalData">
                <DataGridColumns>
                    <DataGridCommandColumn TItem="TGridDto"
                                           PreventRowClick
                                           FixedPosition="TableColumnFixedPosition.Start"
                                           Field="Id"
                                           Gap="Gap.Is2"
                                           Width="@CalculateWidthCommandColumn().ToString()"
                                           TextAlignment="TextAlignment.Center"
                                           HeaderTextAlignment="TextAlignment.Center"
                                           VerticalAlignment="VerticalAlignment.Middle"
                                           FilterTextAlignment="TextAlignment.Center"
                                           FilterVerticalAlignment="VerticalAlignment.Middle">
                        <EditCommandTemplate>
                            <Tooltip Text="@PermissionService.CanWriteTooltip(ModalFormTemplate == null ? "Editar" : "Visualizar")" Inline>
                                <button 
                                        class="btn btn-sm p-1"
                                        @onclick="@context.Clicked"
                                @onclick:preventDefault
                                @onclick:stopPropagation>
                                    <i class="fas @(ModalFormTemplate == null ? "fa-edit" : "fa-eye")"></i>
                                </button>
                                <button 
                                        class="btn btn-sm p-1"
                                        @onclick="@(() => EditItem(context.Item))"
                                        @onclick:preventDefault
                                        @onclick:stopPropagation>
                                    <i class="fas @(ModalFormTemplate == null ? "fa-edit" : "fa-eye")"></i>
                                </button>
                            </Tooltip>
                        </EditCommandTemplate>
                    </DataGridCommandColumn>
                    @Columns
                </DataGridColumns>
            </DataGrid>
        </Column>
    </Row>
    <CruderGridModal @ref="CruderGridModal" TGridEntity="TGridEntity" TGridDto="TGridDto" ModalFormTemplate="@ModalFormTemplate" />
</CascadingValue>

@code {


    #region Parameters
    /// <summary>
    /// Data modified will reflected in this property
    /// </summary>
    [Parameter] public IList<TGridDto> Data { get; set; } = new List<TGridDto>();

    /// <summary>
    /// two-way-data-bind of Data
    /// </summary>
    [Parameter] public Action<IList<TGridDto>> DataChanged { get; set; }


    public TGridDto CurrentSelected { get; set; }
    public Func<TGridDto, Task> CurrentSelectedChanged { get; set; }

    /// <summary>
    /// Filter Request API
    /// </summary>
    [Parameter] public string FilterBy { get; set; }


    /// <summary>
    /// Modal to create or edit an item. If is null, Add and Edit will be inline.
    /// </summary>
    [Parameter] public RenderFragment<TGridDto> ModalFormTemplate { get; set; }
    [Parameter] public string ModalFormTitle { get; set; }

    // /// <summary>
    // /// Tooltip value for Undo button
    // /// </summary>
    // [Parameter] public string TooltipUndo { get; set; } = "Restaurar";

    // /// <summary>
    // /// Tooltip value for Refresh button
    // /// </summary>
    // [Parameter] public string TooltipRefresh { get; set; } = "Atualizar";

    // /// <summary>
    // /// Tooltip value for View button
    // /// </summary>
    // [Parameter] public string TooltipView { get; set; } = "Visualizar";

    // /// <summary>
    // /// Tooltip value for Edit button
    // /// </summary>
    // [Parameter] public string TooltipEdit { get; set; } = "Editar";

    // /// <summary>
    // /// Tooltip value for Delete button
    // /// </summary>
    // [Parameter] public string TooltipDelete { get; set; } = "Deletar";

    // /// <summary>
    // /// Tooltip value for New button
    // /// </summary>
    // [Parameter] public string TooltipNew { get; set; } = "Novo";

    // /// <summary>
    // /// Start command template
    // /// </summary>
    // [Parameter] public RenderFragment<TGridDto> StartCommandTemplate { get; set; }

    // /// <summary>
    // /// Middle command template
    // /// </summary>
    // [Parameter] public RenderFragment<TGridDto> MiddleCommandTemplate { get; set; }

    // /// <summary>
    // /// End command template
    // /// </summary>
    // [Parameter] public RenderFragment<TGridDto> EndCommandTemplate { get; set; }

    // /// <summary>
    // /// Event called before the item is created.
    // /// </summary>
    // [Parameter] public Func<TGridDto, Task> ItemCreating { get; set; }

    // /// <summary>
    // /// Event called after the item is created.
    // /// </summary>
    // [Parameter] public Func<TGridDto, Task> ItemCreated { get; set; }

    // /// <summary>
    // /// Event called before the item is updated.
    // /// </summary>
    // [Parameter] public Func<(TGridDto OldItem, TGridDto NewItem), Task> ItemUpdating { get; set; }

    // /// <summary>
    // /// Event called after the item is updated.
    // /// </summary>
    // [Parameter] public Func<(TGridDto OldItem, TGridDto NewItem), Task> ItemUpdated { get; set; }

    // /// <summary>
    // /// Event called before the item is deleted.
    // /// </summary>
    // [Parameter] public Func<TGridDto, Task> ItemDeleting { get; set; }

    // /// <summary>
    // /// Event called after the item is deleted.
    // /// </summary>
    // [Parameter] public Func<TGridDto, Task> ItemDeleted { get; set; }

    [Parameter] public bool IsDebug { get; set; } = false;

    #endregion Parameters

    #region Injects
    [Inject] public CruderLogger<CruderGrid<TGridEntity, TGridDto>> Logger { get; set; }
    [Inject] public IModalService ModalService { get; set; }
    #endregion

    #region Properties
    public CruderGridModal<TGridEntity, TGridDto> CruderGridModal { get; set; }
    #endregion

    public async Task EditItem(TGridDto item)
    {
        await Logger.Watch("EditItem", async () =>
        {
            await CruderGridModal.ShowEdit();
        });
    }
}