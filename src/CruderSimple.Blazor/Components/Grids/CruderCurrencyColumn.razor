@typeparam TColumnEntity
@typeparam TColumnDto
@inherits CruderColumnBase<TColumnEntity, TColumnDto>

<DataGridNumericColumn @ref="DataGridNumericColumn"
                       TItem="TColumnDto"
                       SortField="@GridSort"
                       Field="@ColumnField"
                       Sortable="@Sortable"
                       Caption="@ColumnCaption"
                       Culture="pt-BR"
                       Editable="@(!AlwaysEditable && Editable)"
                       Filterable="@Filterable"
                       DisplayFormat="{0:C}"
                       Width="170px"
                       HeaderCellStyle="line-height: 38px"
                       PreventRowClick="@AlwaysEditable"
                       HeaderTextAlignment="TextAlignment.Start"
                       VerticalAlignment="VerticalAlignment.Middle"
                       FilterTextAlignment="TextAlignment.Center"
                       FilterVerticalAlignment="VerticalAlignment.Middle">
    <DisplayTemplate>
        <Div @onclick="@((_) => OnClick(context))">
            @if (AlwaysEditable && PermissionService.CanWrite)
            {
                if (context.GetPropertyTypeByName(ColumnField) == typeof(double))
                {
                    <NumericPicker CurrencySymbol="R$ "
                                   CurrencySymbolPlacement="CurrencySymbolPlacement.Prefix"
                                   AllowDecimalPadding="NumericAllowDecimalPadding.Always"
                                   Culture="pt-BR"
                                   DecimalSeparator=","
                                   GroupSeparator="."
                                   SelectAllOnFocus
                                   Min="0"
                                   Value="@((double) context.GetValueByPropertyName(ColumnField))"
                                   ValueChanged="@((double value) => ValueInlineChanged(context, value))"
                                   AlwaysAllowDecimalSeparator
                                   ShowStepButtons="true"
                                   ModifyValueOnWheel
                                   WheelOn="NumericWheelOn.Focus"
                                   Debounce="false"
                                   DebounceInterval="200"
                                   Disabled="@DisabledEditable(context)" />
                }
                else
                {
                    <Tooltip Text="@TooltipValueNull" TextAlignment="TextAlignment.Center">
                        @("-")
                    </Tooltip>
                }
            }
            else
            {
                if (context.GetPropertyTypeByName(ColumnField) == typeof(double))
                {
                    @(context.GetValueByPropertyName<double>(ColumnField).ToString("C"))
                }
                else
                {
                    <Tooltip Text="@TooltipValueNull" TextAlignment="TextAlignment.Center">
                        @("-")
                    </Tooltip>
                }
            }
        </Div>
    </DisplayTemplate>
    <EditTemplate>
        <NumericPicker 
                       CurrencySymbol="R$ " 
                       CurrencySymbolPlacement="CurrencySymbolPlacement.Prefix" 
                       AllowDecimalPadding="NumericAllowDecimalPadding.Always" 
                       Culture="pt-BR"
                       DecimalSeparator=","
                       GroupSeparator="."
                       SelectAllOnFocus
                       Min="0"
                       ValueChanged="@((double value) => ValueChanged(context, value))"
                       AlwaysAllowDecimalSeparator
                       ShowStepButtons="true"
                       ModifyValueOnWheel
                       WheelOn="NumericWheelOn.Focus"
                       Value="@((double) context.CellValue)" 
                       Disabled="@DisabledEditable(context.Item)" />
    </EditTemplate>
</DataGridNumericColumn>
